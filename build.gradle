plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    // AE2
    maven {
        name "ModMaven"
        url "https://modmaven.dev"
    }

    // EMI
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }

    // Modrinth Maven
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }

    maven { url "https://maven.shedaniel.me/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api}"

    modImplementation("appeng:appliedenergistics2-fabric:${project.ae2_version}")

    modCompileOnly "dev.emi:emi-fabric:${project.emi_version}:api"
    modImplementation "dev.emi:emi-fabric:${project.emi_version}"

    // AE2WTLib
    modImplementation("maven.modrinth:pNabrMMw:${project.ae2wtlib_version}-fabric")
    // Cloth Config API
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.ccapi_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    // ModMenu
    modApi("com.terraformersmc:modmenu:${project.modmenu_version}")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version,
                "emi_version": project.emi_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)

    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }

    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}
